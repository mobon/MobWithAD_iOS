// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MobWithADSDKFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdFitSDK
import AdSupport
import AppTrackingTransparency
import CoreTelephony
import CouOffsiteAds
import Foundation
@_exported import MobWithADSDKFramework
import OSLog
import Swift
import UIKit
import UnityAds
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers public class MobWithInterstitailAd : ObjectiveC.NSObject {
  @objc public var adDelegate: (any MobWithADSDKFramework.MobWithIntersitialAdDelegate)?
  public var rootViewController: UIKit.UIViewController?
  public var unitId: Swift.String
  @objc override dynamic public init()
  @objc public func loadAd()
  public func isLoaded() -> Swift.Bool
  public func show()
  @objc deinit
}
extension MobWithADSDKFramework.MobWithInterstitailAd : UnityAdsLoadDelegate, UnityAdsShowDelegate {
  @objc dynamic public func unityAdsAdLoaded(_ placementId: Swift.String)
  @objc dynamic public func unityAdsAdFailed(toLoad placementId: Swift.String, withError error: UnityAdsLoadError, withMessage message: Swift.String)
  @objc dynamic public func unityAdsShowComplete(_ placementId: Swift.String, withFinish state: UnityAdsShowCompletionState)
  @objc dynamic public func unityAdsShowFailed(_ placementId: Swift.String, withError error: UnityAdsShowError, withMessage message: Swift.String)
  @objc dynamic public func unityAdsShowStart(_ placementId: Swift.String)
  @objc dynamic public func unityAdsShowClick(_ placementId: Swift.String)
}
@objc public class MobWithNativeAdLoader : ObjectiveC.NSObject {
  @objc public var nativeAdLoaderDelegate: (any MobWithADSDKFramework.MobWithNativeAdLoaderDelegate)?
  @objc public init(unitIds: [Swift.String], nibName: Swift.String, bundle: Foundation.Bundle?)
  @objc public func isLoadedAd(At indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc public func isFailLoadAd(At indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc public func loadAd(At indexPath: Foundation.IndexPath) -> UIKit.UIView?
  @objc public func retryLoadAd(At indexPath: Foundation.IndexPath)
  @objc public func destoryAds()
  @objc deinit
}
extension MobWithADSDKFramework.MobWithNativeAdLoader : MobWithADSDKFramework.MobWithNativeAdLoaderDelegate {
  @objc dynamic public func mobWithNativeAdViewClickedAd()
  @objc dynamic public func mobWithNativeAdViewDidReceivedAd(At index: Foundation.IndexPath?)
  @objc dynamic public func mobWithNativeAdViewDidFailToReceiveAd(At index: Foundation.IndexPath?)
}
@objc public protocol MobWithADViewDelegate {
  @objc optional func mobWithAdViewClickedAd()
  @objc optional func mobWithAdViewDidReceivedAd()
  @objc optional func mobWithAdViewDidFailToReceiveAd()
}
@objc public protocol MobWithNativeAdLoaderDelegate {
  @objc optional func mobWithNativeAdViewClickedAd()
  @objc optional func mobWithNativeAdViewDidReceivedAd(At index: Foundation.IndexPath?)
  @objc optional func mobWithNativeAdViewDidFailToReceiveAd(At index: Foundation.IndexPath?)
}
@_inheritsConvenienceInitializers @objc public class MobWithADSDK : ObjectiveC.NSObject {
  @objc public static let standard: MobWithADSDKFramework.MobWithADSDK
  public var appId: Swift.String
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  public func initSDK(coupangSubId: Swift.String? = nil)
  public func setUnityGameId(gameId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension MobWithADSDKFramework.MobWithADSDK : UnityAdsInitializationDelegate {
  @objc dynamic public func initializationComplete()
  @objc dynamic public func initializationFailed(_ error: UnityAdsInitializationError, withMessage message: Swift.String)
}
@objc public enum MMBannerType : ObjectiveC.NSInteger {
  case BANNER_320x50
  case BANNER_320x100
  case BANNER_300x250
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class MobWithAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var bannerType: MobWithADSDKFramework.MMBannerType
  @_Concurrency.MainActor @preconcurrency public var bannerUnitID: Swift.String
  @_Concurrency.MainActor @preconcurrency public var rootViewController: UIKit.UIViewController? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var interval: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency public var adDelegate: (any MobWithADSDKFramework.MobWithADViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(_ frame: CoreFoundation.CGRect, type: MobWithADSDKFramework.MMBannerType, bannerUnitId: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func loadAd()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func showNextAd()
  @objc @_Concurrency.MainActor @preconcurrency public func clearAdLoader()
  @objc deinit
}
extension MobWithADSDKFramework.MobWithAdView : AdFitSDK.AdFitNativeAdLoaderDelegate, AdFitSDK.AdFitNativeAdDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func nativeAdDidClickAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func nativeAdLoaderDidReceiveAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func nativeAdLoaderDidReceiveAds(_ nativeAds: [AdFitSDK.AdFitNativeAd])
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func nativeAdLoaderDidFailToReceiveAd(_ nativeAdLoader: AdFitSDK.AdFitNativeAdLoader, error: any Swift.Error)
}
extension MobWithADSDKFramework.MobWithAdView : CouOffsiteAds.CouAdBannerViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func bannerDidClick(_ bannerView: CouOffsiteAds.CouAdBannerView)
  @_Concurrency.MainActor @preconcurrency public func bannerViewFailToReceiveAdWithError(_ bannerView: CouOffsiteAds.CouAdBannerView, error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func bannerDidReceiveAd(_ bannerView: CouOffsiteAds.CouAdBannerView)
  @_Concurrency.MainActor @preconcurrency public func bannerDidUpdateData(_ bannerView: CouOffsiteAds.CouAdBannerView)
}
extension MobWithADSDKFramework.MobWithAdView : UADSBannerViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func bannerViewDidLoad(_ bannerView: UADSBannerView!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func bannerViewDidClick(_ bannerView: UADSBannerView!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func bannerViewDidError(_ bannerView: UADSBannerView!, error: UADSBannerError!)
}
extension MobWithADSDKFramework.MobWithAdView {
  @_Concurrency.MainActor @preconcurrency public func restart()
  @_Concurrency.MainActor @preconcurrency public func stop()
}
@_hasMissingDesignatedInitializers @objc public class MMNativeAdView : ObjectiveC.NSObject {
  public var bannerUnitID: Swift.String
  public var rootViewController: UIKit.UIViewController?
  @objc public var adDelegate: (any MobWithADSDKFramework.MobWithADViewDelegate)?
  @objc public init(bannerUnitId: Swift.String, adContainerView: UIKit.UIView?, nativeAdRootView: UIKit.UIView?, adImageView: UIKit.UIImageView?, logoImageView: UIKit.UIImageView?, titleLabel: UIKit.UILabel?, descriptionLabel: UIKit.UILabel?, gotoSiteButton: UIKit.UIButton?, infoLogoImageView: UIKit.UIImageView?)
  @objc public func loadAd()
  public func showNextAd()
  @objc deinit
}
extension MobWithADSDKFramework.MMNativeAdView {
  @objc dynamic public func performAdClicked()
}
@objc public protocol MobWithIntersitialAdDelegate {
  @objc optional func mobWithIntersitialAdClicked()
  @objc optional func mobWithIntersitialAdDidReceived()
  @objc optional func mobWithIntersitialAdDidFailToReceive()
  @objc optional func mobWithIntersitialAdDidOpend()
}
extension Swift.String {
  public static func from(dict: Swift.Dictionary<Swift.String, Any>) -> Swift.String
  public var dictionary: Swift.Dictionary<Swift.String, Any> {
    get
    set
  }
  public func height(withConstrainedWidth width: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func width(withConstrainedHeight height: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func image(width: CoreFoundation.CGFloat = 40, height: CoreFoundation.CGFloat = 40) -> UIKit.UIImage?
  public func toFormattedCurrency() -> Swift.String
  public func isValidPCode() -> Swift.Bool
}
public protocol MobwithNativeAdViewRender {
  func getAdImageView() -> UIKit.UIImageView?
  func getAdLogoImageView() -> UIKit.UIImageView?
  func getAdTitleLabel() -> UIKit.UILabel?
  func getAdDescriptionLabel() -> UIKit.UILabel?
  func getGoToSiteButton() -> UIKit.UIButton?
  func getInfoLogoImageView() -> UIKit.UIImageView?
}
@_hasMissingDesignatedInitializers public class MobwithNativeAdView {
  @objc deinit
}
extension Swift.Dictionary {
  public static func from(jsonString: Swift.String) -> Swift.Dictionary<Key, Value>
  public var jsonString: Swift.String {
    get
    set
  }
}
public struct MOImageColors {
  public var background: UIKit.UIColor!
  public var primary: UIKit.UIColor!
  public var secondary: UIKit.UIColor!
  public var detail: UIKit.UIColor!
  public init(background: UIKit.UIColor, primary: UIKit.UIColor, secondary: UIKit.UIColor, detail: UIKit.UIColor)
}
public enum MOImageColorsQuality : CoreFoundation.CGFloat {
  case lowest
  case low
  case high
  case highest
  public init?(rawValue: CoreFoundation.CGFloat)
  public typealias RawValue = CoreFoundation.CGFloat
  public var rawValue: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UIImage {
  public func getColors(quality: MobWithADSDKFramework.MOImageColorsQuality = .high, _ completion: @escaping (MobWithADSDKFramework.MOImageColors?) -> Swift.Void)
  public func getColors(quality: MobWithADSDKFramework.MOImageColorsQuality = .high) -> MobWithADSDKFramework.MOImageColors?
}
extension MobWithADSDKFramework.MMBannerType : Swift.Equatable {}
extension MobWithADSDKFramework.MMBannerType : Swift.Hashable {}
extension MobWithADSDKFramework.MMBannerType : Swift.RawRepresentable {}
extension MobWithADSDKFramework.MOImageColorsQuality : Swift.Equatable {}
extension MobWithADSDKFramework.MOImageColorsQuality : Swift.Hashable {}
extension MobWithADSDKFramework.MOImageColorsQuality : Swift.RawRepresentable {}
